X <- matrix(rnorm(3, mean = 0, sd = 1),3,1)
Y <- L%*%X
Y
set.seed(5)
help(mvrnorm)
mvrnorm(1, mu = c(0,0,0), sigma)
sigma <- matrix(c(0.1, 0.2, 0.2, 0.2, 10, 0.2, 0.2, 0.2, 100), 3, 3)
L <- chol(sigma)
set.seed(5)
X <- matrix(rnorm(3, mean = 0, sd = 1),3,1)
Y <- numeric(3)+L%*%X
Y
set.seed(5)
help(mvrnorm)
mvrnorm(1, mu = c(0,0,0), sigma)
X
L
Y <- numeric(3)+L%*%X
Y
L <- chol(sigma)
L%*%t(L)
L <- t(chol(sigma))
L%*%t(L)
set.seed(5)
X <- matrix(rnorm(3, mean = 0, sd = 1),3,1)
Y <- numeric(3)+L%*%X
Y
set.seed(5)
help(mvrnorm)
mvrnorm(1, mu = c(0,0,0), sigma)
t(X)%*%X
sigma <- matrix(c(0.1, 0.2, 0.2, 0.2, 10, 0.2, 0.2, 0.2, 100), 3, 3)
L <- chol(sigma)
t(L)%*%L
set.seed(5)
X <- matrix(rnorm(3, mean = 0, sd = 1),3,1)
Y <- numeric(3)+t(L)%*%X
Y
set.seed(5)
help(mvrnorm)
mvrnorm(1, mu = c(0,0,0), sigma)
n <- 100
vect.exp <- numeric(100)
for(i in 1:n){
vect.exp[i] <- rexp(1, 2)
}
vect.exp
ech <- rexp(n, 2)
ech
set.seed(6)
n <- 100
ech <- rexp(n, 2)
sample(1:10000)
X <- sample(1:10000, 100)
ech <- sapply(X, function(X){lambda*exp(-lambda*X)})
ech
X <- sample(1:10000, 100)
lambda <- 2
ech <- sapply(X, function(X){lambda*exp(-lambda*X)})
ech
X <- seq(1:10000, length = 100)
lambda <- 2
ech <- sapply(X, function(X){lambda*exp(-lambda*X)})
ech
X
X <- seq(1, 10, length = 100)
lambda <- 2
ech <- sapply(X, function(X){lambda*exp(-lambda*X)})
ech
X <- seq(1, 100, length = 100)
lambda <- 2
ech <- sapply(X, function(X){lambda*exp(-lambda*X)})
ech
X <- seq(1, 10, length = 100)
lambda <- 2
ech <- sapply(X, function(X){lambda*exp(-lambda*X)})
ech
X <- sample(-2:2, 20)
lambda <- 2
ech <- sapply(X, function(X){lambda*exp(-lambda*X)*(X > 0)})
ech
X
X <- sample(-2:2, 20)
X <- sample(-2:2, 20)
X <- sample(-2:2, 20, replace = True)
X <- sample(-2:2, 20, replace = T)
lambda <- 2
ech <- sapply(X, function(X){lambda*exp(-lambda*X)*(X > 0)})
ech
X <- runif(20, -2, 2)
lambda <- 2
ech <- sapply(X, function(X){lambda*exp(-lambda*X)*(X > 0)})
ech
X <- runif(20, -2, 7)
lambda <- 2
ech <- sapply(X, function(X){lambda*exp(-lambda*X)*(X > 0)})
ech
dexp(X)
rexp(X)
dexp(rexp(X))
rexp(12)
rexp(12, 2)
dexp(rexp(12, 2))
dexp(X, 2)
ech
ech <- rexp(100, 2)
theta <- seq(9.1, 4, by = 0.5)
theta <- seq(0.1, 4, by = 0.5)
theta
theta <- seq(0.1, 4, by = 0.1)
theta
ech <- rexp(100, 2)
log.vrais <- numeric(100)
theta <- seq(0.1, 4, by = 0.1)
for(i in 1:length(theta)){
somme <- 0
for(k in 1:100){
somme <- somme + log(i*exp(-i*ech[k])
}
log.vrais[i] <- somme
}
log.vrais
ech <- rexp(100, 2)
log.vrais <- numeric(100)
theta <- seq(0.1, 4, by = 0.1)
for(i in 1:length(theta)){
somme <- 0
for(k in 1:100){
somme <- somme + log(theta[i]*exp(-theta[i]*ech[k])
}
log.vrais[i] <- somme
}
log.vrais
ech <- rexp(100, 2)
log.vrais <- numeric(100)
theta <- seq(0.1, 4, by = 0.1)
for(i in 1:length(theta)){
somme <- 0
for(k in 1:100){
somme <- somme + log(theta[i]*exp(-theta[i]*ech[k]))
}
log.vrais[i] <- somme
}
log.vrais
ech <- rexp(100, 2)
theta <- seq(0.1, 4, by = 0.1)
log.vrais <- numeric(length(theta))
for(i in 1:length(theta)){
somme <- 0
for(k in 1:100){
somme <- somme + log(theta[i]*exp(-theta[i]*ech[k]))
}
log.vrais[i] <- somme
}
log.vrais
plot(log.vrais, theta)
log.vrais <- sapply(theta, function(theta){sum(dexp(ech, theta))})
log.vrais
plot(log.vrais, theta)
ech <- rexp(100, 2)
theta <- seq(0.1, 4, by = 0.1)
log.vrais <- numeric(length(theta))
for(i in 1:length(theta)){
somme <- 0
for(k in 1:100){
somme <- somme + log(theta[i]*exp(-theta[i]*ech[k]))
}
log.vrais[i] <- somme
}
log.vrais
plot(log.vrais, theta)
log.vrais <- sapply(theta, function(theta){sum(dexp(ech, theta))})
plot(log.vrais, theta)
plot(log.vrais, theta)
log.vrais <- numeric(length(theta))
for(i in 1:length(theta)){
somme <- 0
for(k in 1:100){
somme <- somme + log(theta[i]*exp(-theta[i]*ech[k]))
}
log.vrais[i] <- somme
}
log.vrais
plot(log.vrais, theta)
log.vrais <- sapply(theta, function(theta){sum(dexp(ech, theta))})
plot(log.vrais, theta)
log.vrais <- sapply(theta, function(theta){sum(dexp(ech, theta, log = T))})
plot(log.vrais, theta)
plot(log.vrais~theta)
log.vrais <- numeric(length(theta))
for(i in 1:length(theta)){
somme <- 0
for(k in 1:100){
somme <- somme + log(theta[i]*exp(-theta[i]*ech[k]))
}
log.vrais[i] <- somme
}
plot(log.vrais~theta)
log.vrais <- sapply(theta, function(theta){sum(dexp(ech, theta, log = T))})
plot(log.vrais~theta)
pexp(max(log.vrais))
max(log.vrais)
qexp(max(log.vrais))
pexp(max(log.vrais))
pexp(max(log.vrais))
max(log.vrais)
log.vrais <- sapply(theta, function(theta){sum(dexp(ech, theta, log = T))})
max(log.vrais)
set.seed(6)
log.vrais <- sapply(theta, function(theta){sum(dexp(ech, theta, log = T))})
plot(log.vrais~theta)
pexp(max(log.vrais))
max(log.vrais)
set.seed(6)
ech <- rexp(100, 2)
theta <- seq(0.1, 4, by = 0.1)
log.vrais <- numeric(length(theta))
for(i in 1:length(theta)){
somme <- 0
for(k in 1:100){
somme <- somme + log(theta[i]*exp(-theta[i]*ech[k]))
}
log.vrais[i] <- somme
}
log.vrais
plot(log.vrais~theta)
log.vrais <- sapply(theta, function(theta){sum(dexp(ech, theta, log = T))})
plot(log.vrais~theta)
pexp(max(log.vrais))
max(log.vrais)
qexp(max(log.vrais))
MaxVrais <- 1/mean(ech)
abline(v = MaxVrais)
points(max(log.vrais), theta[which.max(log.vrais)])
points(theta[which.max(log.vrais)], max(log.vrais))
theta[which.max(log.vrais)]
max(log.vrais)
points(c(theta[which.max(log.vrais)], max(log.vrais)))
log.vrais <- sapply(theta, function(theta){sum(dexp(ech, theta, log = T))})
plot(log.vrais~theta)
MaxVrais <- 1/mean(ech)
abline(v = MaxVrais)
points(c(theta[which.max(log.vrais)], max(log.vrais)))
log.vrais <- sapply(theta, function(theta){sum(dexp(ech, theta, log = T))})
plot(log.vrais~theta, type = 'l')
MaxVrais <- 1/mean(ech)
abline(v = MaxVrais)
points(c(theta[which.max(log.vrais)], max(log.vrais)))
help(rbinom)
ech1 <- rbinom(1000, 1, 0.4)
ech1
vect.moy <- sapply(ech1, function(X){sum(ech1)/length(ech1)})
vect.moy
ech1 <- rbinom(1000, 1, 0.4)
ech1
vect.moy <- numeric(1000)
for(i in 1:length(ech1)){
vect.moy[i] <- sum(ech1[1:i])/length(ech[1:i])
}
vect.moy
ech1 <- rbinom(1000, 1, 0.4)
ech1
vect.moy <- numeric(1000)
for(i in 1:length(ech1)){
vect.moy[i] <- sum(ech1[1:i])/i
}
vect.moy
set.seed(7)
ech1 <- rbinom(1000, 1, 0.4)
ech1
vect.moy <- numeric(1000)
for(i in 1:length(ech1)){
vect.moy[i] <- sum(ech1[1:i])/i
}
vect.moy
plot(vect.moy~seq(1,1000, by = 1))
abline(h = 0.4)
abline(h = 0.4, col = 'red')
pchisq(0.95)
pchisq(0.95, 10)
qchisq(0.95,10)
qchisq(0.99)
qchisq(0.99, 10)
pchisq(20.48,10)
1-0.974974
qchisq(0.5,10)
pchisq(20.48,10)
qpois(0.1,12)
ppois(7,12)
ppois(10,12)
shiny::runApp('C:/Users/Marine Hamelin/Dropbox/M1MAS/S2/projet_visualisation/VisuMarineClement/VisuMarineClement/Rmusee')
runApp('C:/Users/Marine Hamelin/Dropbox/M1MAS/S2/projet_visualisation/VisuMarineClement/VisuMarineClement/Rmusee')
runApp('C:/Users/Marine Hamelin/Dropbox/M1MAS/S2/projet_visualisation/VisuMarineClement/VisuMarineClement/Rmusee')
shiny::runApp('C:/Users/Marine Hamelin/Dropbox/M1MAS/S2/projet_visualisation/VisuMarineClement/VisuMarineClement/Rmusee')
install.packages('skiny')
runApp('C:/Users/Marine Hamelin/Dropbox/M1MAS/S2/projet_visualisation/VisuMarineClement/VisuMarineClement/Rmusee')
runApp('C:/Users/Marine Hamelin/Dropbox/M1MAS/S2/projet_visualisation/VisuMarineClement/VisuMarineClement/Rmusee')
library(shiny)
runApp('C:/Users/Marine Hamelin/Dropbox/M1MAS/S2/projet_visualisation/VisuMarineClement/VisuMarineClement/Rmusee')
runApp('C:/Users/Marine Hamelin/Dropbox/M1MAS/S2/projet_visualisation/VisuMarineClement/VisuMarineClement/Rmusee')
shiny::runApp('C:/Users/Marine Hamelin/Dropbox/M1MAS/S2/projet_visualisation/VisuMarineClement/VisuMarineClement/VisuMarineClement/Rmusee/rmusee')
shiny::runApp('C:/Users/Marine Hamelin/Dropbox/M1MAS/S2/projet_visualisation/VisuMarineClement/VisuMarineClement/VisuMarineClement/Rmusee/rmusee')
#
# This is the user-interface definition of a Shiny web application. You can
# run the application by clicking 'Run App' above.
#
# Find out more about building applications with Shiny here:
#
#    http://shiny.rstudio.com/
#
library(shiny)
library(tidyverse)
library(DT)
library(rAmCharts)
library(shinyWidgets)
library(leaflet)
# Define UI for application that draws a histogram
shinyUI(bootstrapPage(theme = 'style.css',
navbarPage(
title = img(src = 'musee.jpg', height ='40px', align ="right", alt ='image'),
tabPanel(title = 'PrÃ©sentation',
fluidRow(
tags$div(id = 'structure',
tags$div(class = 'class1',
tags$h1("Bienvenue sur notre application shiny"),
tags$p(id = 'p1',"Elle nous permet de visualiser des donnÃ©es sur les musÃ©es de France que nous avons receuillies dans une base.")
),
tags$div(class = 'class2',
tags$h2('ReprÃ©sentation carthographique'),
tags$p(class = 'text','Chaque musÃ©e est reprÃ©sentÃ© sur une carte interactive.')
),
tags$div(class = 'class3',
tags$div(
tags$h2("ReprÃ©sentation graphique"),
tags$p(class = 'text',"Nous avons Ã©galement reprÃ©sentÃ© les donnÃ©es avec des graphiques.
Pour chaque rÃ©gion et dÃ©partement nous reprÃ©sentons la frÃ©quentation dans les musÃ©es.")),
tags$div(id = 'img',
img(id = 'gra', src = 'graphe.PNG', height = '340px'))
)
)
)),
tabPanel(title = 'Cartographie',
'here carte des musÃ©es de France'),
tabPanel(title = 'Statistique descriptive',
fluidRow(column(width = 4,
wellPanel(style = "background-color: #fff; border-color: #2c3e50",
sliderInput("annee",
"AnnÃ©e :",
min = 2013,
max = 2018,
value = 2018,
step = 1,
sep = ''),
selectInput(inputId = "region",
label = "SÃ©lectionner une rÃ©gion :",
choices = musee %>% group_by(region) %>% summarise(region = unique(region)))
),
fluidRow(column(12,
wellPanel(style = "background-color: #fff; border-color: #2c3e50; height: 525px",
chooseSliderSkin('Flat', color = '#26C4EC'),
selectInput(inputId = "dpt",
label = "SÃ©lectionner un dÃ©partement :",
choices = musee %>% group_by(departement) %>% summarise(departement = unique(departement)),
selected = 'PARIS'),
DTOutput(outputId = "table")
)))
),
column(8,
amChartsOutput(outputId = 'histo'),
amChartsOutput(outputId = 'graph'))),
)
)
)
)
library(tidyverse)
net <- function(data){
museefreq = read_csv(data, locale=locale())
date = museefreq$year[1]
museefreq <- museefreq %>%
filter(country == 'France', status == 'open') %>%
select(!c(website, phone, fax, description, tags, year))
if (date != 2018){
museefreq <- museefreq %>% select(id,stats)
}
pdate <- paste('payant', date, sep = '.')
gdate <- paste('gratuit',date, sep ='.')
tdate <-paste('total',date, sep ='.')
museefreq <-  museefreq %>%
separate(stats, c(pdate, gdate, 'label-date'), sep = ';') %>%
select(!`label-date`)
museefreq[,pdate]<-  as.numeric(apply(as.matrix(museefreq[,pdate]),1, substring,first=8))
museefreq[,gdate] <-  as.numeric(apply(as.matrix(museefreq[,gdate]),1, substring,first=9))
museefreq[,tdate] <- museefreq[,pdate] + museefreq[,gdate]
return(museefreq)
}
lmusee = paste('frequentation-musees-de-france-',2018:2013,'.csv',sep = '')
list.musee = lapply(lmusee, net)
museefreq <- list.musee[[1]]
for (i in 2:(length(list.musee))){
museefreq <- inner_join(museefreq, list.musee[[i]])
}
museefreq <-  museefreq %>% filter(lon > (-20) & lon < 25)
loc_musee <- read_delim('liste-et-localisation-des-musees-de-france.csv',delim = ';')
loc_musee <- loc_musee %>% select(c(2,6,8,14,15))
musee <- inner_join(loc_musee, museefreq, by = c('ref_musee'='id'))
write.csv(musee, 'musee.csv', fileEncoding = "UTF-8")
setwd("C:/Users/Marine Hamelin/Dropbox/M1MAS/S2/projet_visualisation/VisuMarineClement/VisuMarineClement/VisuMarineClement")
library(tidyverse)
net <- function(data){
museefreq = read_csv(data, locale=locale())
date = museefreq$year[1]
museefreq <- museefreq %>%
filter(country == 'France', status == 'open') %>%
select(!c(website, phone, fax, description, tags, year))
if (date != 2018){
museefreq <- museefreq %>% select(id,stats)
}
pdate <- paste('payant', date, sep = '.')
gdate <- paste('gratuit',date, sep ='.')
tdate <-paste('total',date, sep ='.')
museefreq <-  museefreq %>%
separate(stats, c(pdate, gdate, 'label-date'), sep = ';') %>%
select(!`label-date`)
museefreq[,pdate]<-  as.numeric(apply(as.matrix(museefreq[,pdate]),1, substring,first=8))
museefreq[,gdate] <-  as.numeric(apply(as.matrix(museefreq[,gdate]),1, substring,first=9))
museefreq[,tdate] <- museefreq[,pdate] + museefreq[,gdate]
return(museefreq)
}
lmusee = paste('frequentation-musees-de-france-',2018:2013,'.csv',sep = '')
list.musee = lapply(lmusee, net)
museefreq <- list.musee[[1]]
for (i in 2:(length(list.musee))){
museefreq <- inner_join(museefreq, list.musee[[i]])
}
museefreq <-  museefreq %>% filter(lon > (-20) & lon < 25)
loc_musee <- read_delim('liste-et-localisation-des-musees-de-france.csv',delim = ';')
loc_musee <- loc_musee %>% select(c(2,6,8,14,15))
musee <- inner_join(loc_musee, museefreq, by = c('ref_musee'='id'))
write.csv(musee, 'musee.csv', fileEncoding = "UTF-8")
#
# This is the user-interface definition of a Shiny web application. You can
# run the application by clicking 'Run App' above.
#
# Find out more about building applications with Shiny here:
#
#    http://shiny.rstudio.com/
#
library(shiny)
library(tidyverse)
library(DT)
library(rAmCharts)
library(shinyWidgets)
library(leaflet)
# Define UI for application that draws a histogram
shinyUI(bootstrapPage(theme = 'style.css',
navbarPage(
title = img(src = 'musee.jpg', height ='40px', align ="right", alt ='image'),
tabPanel(title = 'PrÃ©sentation',
fluidRow(
tags$div(id = 'structure',
tags$div(class = 'class1',
tags$h1("Bienvenue sur notre application shiny"),
tags$p(id = 'p1',"Elle nous permet de visualiser des donnÃ©es sur les musÃ©es de France que nous avons receuillies dans une base.")
),
tags$div(class = 'class2',
tags$h2('ReprÃ©sentation carthographique'),
tags$p(class = 'text','Chaque musÃ©e est reprÃ©sentÃ© sur une carte interactive.')
),
tags$div(class = 'class3',
tags$div(
tags$h2("ReprÃ©sentation graphique"),
tags$p(class = 'text',"Nous avons Ã©galement reprÃ©sentÃ© les donnÃ©es avec des graphiques.
Pour chaque rÃ©gion et dÃ©partement nous reprÃ©sentons la frÃ©quentation dans les musÃ©es.")),
tags$div(id = 'img',
img(id = 'gra', src = 'graphe.PNG', height = '340px'))
)
)
)),
tabPanel(title = 'Cartographie',
'here carte des musÃ©es de France'),
tabPanel(title = 'Statistique descriptive',
fluidRow(column(width = 4,
wellPanel(style = "background-color: #fff; border-color: #2c3e50",
sliderInput("annee",
"AnnÃ©e :",
min = 2013,
max = 2018,
value = 2018,
step = 1,
sep = ''),
selectInput(inputId = "region",
label = "SÃ©lectionner une rÃ©gion :",
choices = musee %>% group_by(region) %>% summarise(region = unique(region)))
),
fluidRow(column(12,
wellPanel(style = "background-color: #fff; border-color: #2c3e50; height: 525px",
chooseSliderSkin('Flat', color = '#26C4EC'),
selectInput(inputId = "dpt",
label = "SÃ©lectionner un dÃ©partement :",
choices = musee %>% group_by(departement) %>% summarise(departement = unique(departement)),
selected = 'PARIS'),
DTOutput(outputId = "table")
)))
),
column(8,
amChartsOutput(outputId = 'histo'),
amChartsOutput(outputId = 'graph'))),
)
)
)
)
1+1
